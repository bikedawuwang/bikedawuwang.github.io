<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bikedawuwang.github.io</id>
    <title>老人与海……鲜的知识屋</title>
    <updated>2019-10-15T07:13:34.222Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bikedawuwang.github.io"/>
    <link rel="self" href="https://bikedawuwang.github.io/atom.xml"/>
    <subtitle>一名励志做全栈的前端工程师
</subtitle>
    <logo>https://bikedawuwang.github.io/images/avatar.png</logo>
    <icon>https://bikedawuwang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 老人与海……鲜的知识屋</rights>
    <entry>
        <title type="html"><![CDATA[小记 git submodule]]></title>
        <id>https://bikedawuwang.github.io/post/submodule</id>
        <link href="https://bikedawuwang.github.io/post/submodule">
        </link>
        <updated>2019-10-15T06:49:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="如何使用-git-submodule">如何使用 git submodule</h1>
<p>当一个项目需要包含其他支持项目源码时使用的功能，作用是两个项目是独立的，且主项目可以使用另一个支持项目。</p>
<pre><code>    git submodule add &lt;submodule_url&gt;  # 添加子项目
</code></pre>
<p>添加子项目后会出现.gitmodules的文件，这是一个配置文件，记录mapping between the project's URL and the local subdirectory。且.gitmodules在git版本控制中，这样其他参与项目的人才能知道submodule projects的情况。</p>
<pre><code>    git submodule init  # 初始化本地.gitmodules文件
    git submodule update  # 同步远端submodule源码
</code></pre>
<p>如果获取的项目包含submodules，pull main project的时候不会同时获取submodules的源码，需要执行本地.gitmodules初始化的命令，再同步远端submodule源码。如果希望clone main project的时候包含所有submodules，可以使用下面的命令</p>
<pre><code>    git clone --recurse-submodules &lt;main_project_url&gt;  # 获取主项目和所有子项目源码
</code></pre>
<p>操作submodules源码：先进入submodule的direcotry，再执行下述命令</p>
<pre><code>    git fetch  # 获取submodule远端源码
    git merge origin/&lt;branch_name&gt;  # 合并submodule远端源码
    git pull  # 获取submodule远端源码合并到当前分支
    git checkout &lt;branch_name&gt;  # 切换submodule的branch
    git commit -am &quot;change_summary&quot;  # 提交submodule的commit

    # or

    # 更新submodule源码，默认更新的branch是master，如果要修改branch，在.gitmodule中设置
    git submodule update --remote &lt;submodule_name&gt;  
    # 更新所有submodule源码，默认更新.gitmodule中设置的跟踪分支，未设置则跟踪master
    git submodule update --remote  
    # 当submodule commits提交有问题的时候放弃整个push
    git push --recurse-submodules=check
    # 分开提交submodule和main project
    git push --recurse-submodules=on-demand
</code></pre>
<p>.gitmodule内容大致如下</p>
<pre><code>    [submodule &lt;submodule_name&gt;]
    path = &lt;local_directory&gt;
    url = &lt;remote_url&gt;
    branch = &lt;remote_update_branch_name&gt;
</code></pre>
<p>用'foreach'关键字同时管理多个submodules，如下</p>
<pre><code>    # stash所有submodules
    git submodule foreach 'git stash'
    # 所有submodules创建新分支
    git submodule foreach 'git checkout -b &lt;branch_name&gt;'
</code></pre>
<p>submodules的命令很长，为提升效率，可以创建alias，记录在.git/config路径下。如下：</p>
<pre><code>    git config alias.spush 'push --recurse-submodules=on-demand'
    git config alias.supdate 'submodule update --remote --merge'
</code></pre>
<p>这样，可以使用下面的命令来提高效率</p>
<pre><code>    git supdate
    git spush
</code></pre>
]]></content>
    </entry>
</feed>